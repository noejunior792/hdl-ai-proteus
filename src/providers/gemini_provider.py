import requests
from typing import Dict, Any, Optional
from .base_provider import BaseAIProvider, AIProviderConfig, AIResponse


class GeminiProvider(BaseAIProvider):
    """
    Google Gemini provider for generating HDL code.
    
    This provider uses Google's Gemini API to generate VHDL/Verilog code
    from natural language descriptions.
    """

    def __init__(self, config: AIProviderConfig):
        """
        Initialize Gemini provider.
        
        Args:
            config: Configuration object with Gemini settings
        """
        super().__init__(config)
        self.base_url = "https://generativelanguage.googleapis.com/v1beta"
        
    def validate_config(self) -> bool:
        """
        Validate Gemini configuration.
        
        Returns:
            True if configuration is valid
            
        Raises:
            ValueError: If required configuration is missing
        """
        if not self.config.api_key:
            raise ValueError("Missing required Gemini API key")
        
        if not self.config.model_name:
            raise ValueError("Missing required Gemini model name")
            
        # Validate model name format
        if not self.config.model_name.startswith('gemini-'):
            raise ValueError("Gemini model name must start with 'gemini-'")
            
        return True

    def generate_code(self, prompt: str, **kwargs) -> AIResponse:
        """
        Generate HDL code using Google Gemini.
        
        Args:
            prompt: Natural language description of the circuit
            **kwargs: Additional parameters (temperature, max_tokens, etc.)
            
        Returns:
            AIResponse object containing generated code and metadata
            
        Raises:
            Exception: If API call fails or returns invalid response
        """
        self.validate_config()
        
        # Override config with kwargs if provided
        temperature = kwargs.get('temperature', self.config.temperature)
        max_tokens = kwargs.get('max_tokens', self.config.max_tokens)
        
        # Construct API URL
        url = f"{self.base_url}/models/{self.config.model_name}:generateContent"
        
        # Prepare headers
        headers = {
            "Content-Type": "application/json",
        }
        
        # Prepare request data for Gemini API
        data = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": f"{self.system_prompt}\n\nUser request: {prompt}"
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": temperature,
                "maxOutputTokens": max_tokens,
                "topP": kwargs.get('top_p', 0.8),
                "topK": kwargs.get('top_k', 40)
            }
        }
        
        # Add safety settings
        data["safetySettings"] = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            }
        ]
        
        # Add API key to URL parameters
        params = {
            "key": self.config.api_key
        }
        
        try:
            # Make API request
            response = requests.post(url, headers=headers, json=data, params=params, timeout=60)
            response.raise_for_status()
            
            # Parse response
            response_data = response.json()
            
            # Check for errors in response
            if "error" in response_data:
                raise Exception(f"Gemini API error: {response_data['error'].get('message', 'Unknown error')}")
            
            # Extract content
            candidates = response_data.get("candidates", [])
            if not candidates:
                raise Exception("No content generated by Gemini")
            
            content = candidates[0]["content"]["parts"][0]["text"]
            
            # Extract usage information if available
            usage = response_data.get("usageMetadata", {})
            
            # Create metadata
            metadata = {
                "model": self.config.model_name,
                "finish_reason": candidates[0].get("finishReason", "STOP"),
                "safety_ratings": candidates[0].get("safetyRatings", []),
                "response_time": response.elapsed.total_seconds()
            }
            
            return AIResponse(
                content=content,
                provider="gemini",
                model=self.config.model_name,
                usage=usage,
                metadata=metadata
            )
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Gemini API request failed: {str(e)}")
        except KeyError as e:
            raise Exception(f"Invalid response format from Gemini: missing {str(e)}")
        except Exception as e:
            raise Exception(f"Failed to generate code with Gemini: {str(e)}")

    def get_provider_info(self) -> Dict[str, Any]:
        """
        Get Gemini provider information.
        
        Returns:
            Dictionary containing provider information
        """
        return {
            "provider_name": "Google Gemini",
            "provider_type": "gemini",
            "supported_models": [
                "gemini-1.5-pro",
                "gemini-1.5-flash",
                "gemini-1.0-pro",
                "gemini-pro"
            ],
            "required_config": [
                "api_key",
                "model_name"
            ],
            "optional_config": [
                "temperature",
                "max_tokens",
                "top_p",
                "top_k"
            ],
            "description": "Google Gemini AI provider for HDL code generation",
            "documentation_url": "https://ai.google.dev/docs"
        }

    def test_connection(self) -> Dict[str, Any]:
        """
        Test the connection to Gemini service.
        
        Returns:
            Dictionary with connection test results
        """
        try:
            self.validate_config()
            
            # Simple test prompt
            test_prompt = "Generate a simple AND gate in VHDL"
            response = self.generate_code(test_prompt, max_tokens=100)
            
            return {
                "success": True,
                "message": "Connection successful",
                "provider": "gemini",
                "model": response.model,
                "response_time": response.metadata.get("response_time", 0) if response.metadata else 0
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": f"Connection failed: {str(e)}",
                "provider": "gemini"
            }

    @classmethod
    def create_from_dict(cls, config_dict: Dict[str, Any]) -> 'GeminiProvider':
        """
        Create provider instance from configuration dictionary.
        
        Args:
            config_dict: Dictionary containing configuration parameters
            
        Returns:
            GeminiProvider instance
        """
        config = AIProviderConfig(
            provider_name="gemini",
            model_name=config_dict.get('model_name', 'gemini-1.5-pro'),
            api_key=config_dict['api_key'],
            endpoint=config_dict.get('endpoint'),
            api_version=config_dict.get('api_version'),
            temperature=config_dict.get('temperature', 0.7),
            max_tokens=config_dict.get('max_tokens', 2000),
            additional_params=config_dict.get('additional_params', {})
        )
        
        return cls(config)