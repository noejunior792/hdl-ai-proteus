import requests
from typing import Dict, Any, Optional
from .base_provider import BaseAIProvider, AIProviderConfig, AIResponse


class OpenAIProvider(BaseAIProvider):
    """
    OpenAI provider for generating HDL code.
    
    This provider uses OpenAI's API to generate VHDL/Verilog code
    from natural language descriptions.
    """

    def __init__(self, config: AIProviderConfig):
        """
        Initialize OpenAI provider.
        
        Args:
            config: Configuration object with OpenAI settings
        """
        super().__init__(config)
        self.base_url = config.endpoint or "https://api.openai.com/v1"
        
    def validate_config(self) -> bool:
        """
        Validate OpenAI configuration.
        
        Returns:
            True if configuration is valid
            
        Raises:
            ValueError: If required configuration is missing
        """
        if not self.config.api_key:
            raise ValueError("Missing required OpenAI API key")
        
        if not self.config.model_name:
            raise ValueError("Missing required OpenAI model name")
            
        # Validate API key format (should start with sk-)
        if not self.config.api_key.startswith('sk-'):
            raise ValueError("OpenAI API key should start with 'sk-'")
            
        return True

    def generate_code(self, prompt: str, **kwargs) -> AIResponse:
        """
        Generate HDL code using OpenAI.
        
        Args:
            prompt: Natural language description of the circuit
            **kwargs: Additional parameters (temperature, max_tokens, etc.)
            
        Returns:
            AIResponse object containing generated code and metadata
            
        Raises:
            Exception: If API call fails or returns invalid response
        """
        self.validate_config()
        
        # Override config with kwargs if provided
        temperature = kwargs.get('temperature', self.config.temperature)
        max_tokens = kwargs.get('max_tokens', self.config.max_tokens)
        
        # Construct API URL
        url = f"{self.base_url}/chat/completions"
        
        # Prepare headers
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.config.api_key}",
        }
        
        # Add organization header if provided
        if self.config.additional_params and 'organization' in self.config.additional_params:
            headers["OpenAI-Organization"] = self.config.additional_params['organization']
        
        # Prepare request data
        data = {
            "model": self.config.model_name,
            "messages": self.prepare_messages(prompt),
            "temperature": temperature,
            "max_tokens": max_tokens,
        }
        
        # Add optional parameters
        optional_params = ['top_p', 'frequency_penalty', 'presence_penalty', 'stop']
        for param in optional_params:
            if param in kwargs:
                data[param] = kwargs[param]
            elif self.config.additional_params and param in self.config.additional_params:
                data[param] = self.config.additional_params[param]
        
        try:
            # Make API request
            response = requests.post(url, headers=headers, json=data, timeout=60)
            response.raise_for_status()
            
            # Parse response
            response_data = response.json()
            
            # Check for errors in response
            if "error" in response_data:
                raise Exception(f"OpenAI API error: {response_data['error'].get('message', 'Unknown error')}")
            
            # Extract content
            choices = response_data.get("choices", [])
            if not choices:
                raise Exception("No content generated by OpenAI")
            
            content = choices[0]["message"]["content"]
            
            # Extract usage information
            usage = response_data.get("usage", {})
            
            # Create metadata
            metadata = {
                "model": response_data.get("model", self.config.model_name),
                "finish_reason": choices[0].get("finish_reason", "stop"),
                "response_time": response.elapsed.total_seconds(),
                "request_id": response.headers.get("x-request-id")
            }
            
            return AIResponse(
                content=content,
                provider="openai",
                model=response_data.get("model", self.config.model_name),
                usage=usage,
                metadata=metadata
            )
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"OpenAI API request failed: {str(e)}")
        except KeyError as e:
            raise Exception(f"Invalid response format from OpenAI: missing {str(e)}")
        except Exception as e:
            raise Exception(f"Failed to generate code with OpenAI: {str(e)}")

    def get_provider_info(self) -> Dict[str, Any]:
        """
        Get OpenAI provider information.
        
        Returns:
            Dictionary containing provider information
        """
        return {
            "provider_name": "OpenAI",
            "provider_type": "openai",
            "supported_models": [
                "gpt-4",
                "gpt-4-turbo",
                "gpt-4-turbo-preview",
                "gpt-4-0125-preview",
                "gpt-4-1106-preview",
                "gpt-3.5-turbo",
                "gpt-3.5-turbo-16k",
                "gpt-3.5-turbo-1106"
            ],
            "required_config": [
                "api_key",
                "model_name"
            ],
            "optional_config": [
                "endpoint",
                "temperature",
                "max_tokens",
                "top_p",
                "frequency_penalty",
                "presence_penalty",
                "stop",
                "organization"
            ],
            "description": "OpenAI GPT models provider for HDL code generation",
            "documentation_url": "https://platform.openai.com/docs/api-reference"
        }

    def test_connection(self) -> Dict[str, Any]:
        """
        Test the connection to OpenAI service.
        
        Returns:
            Dictionary with connection test results
        """
        try:
            self.validate_config()
            
            # Simple test prompt
            test_prompt = "Generate a simple AND gate in VHDL"
            response = self.generate_code(test_prompt, max_tokens=100)
            
            return {
                "success": True,
                "message": "Connection successful",
                "provider": "openai",
                "model": response.model,
                "response_time": response.metadata.get("response_time", 0) if response.metadata else 0
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": f"Connection failed: {str(e)}",
                "provider": "openai"
            }

    @classmethod
    def create_from_dict(cls, config_dict: Dict[str, Any]) -> 'OpenAIProvider':
        """
        Create provider instance from configuration dictionary.
        
        Args:
            config_dict: Dictionary containing configuration parameters
            
        Returns:
            OpenAIProvider instance
        """
        config = AIProviderConfig(
            provider_name="openai",
            model_name=config_dict.get('model_name', 'gpt-4'),
            api_key=config_dict['api_key'],
            endpoint=config_dict.get('endpoint'),
            api_version=config_dict.get('api_version'),
            temperature=config_dict.get('temperature', 0.7),
            max_tokens=config_dict.get('max_tokens', 2000),
            additional_params=config_dict.get('additional_params', {})
        )
        
        return cls(config)